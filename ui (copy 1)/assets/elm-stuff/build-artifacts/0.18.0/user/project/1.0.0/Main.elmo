var _user$project$Main$urlOf = function (model) {
	var $short = function () {
		var _p0 = A2(_elm_lang$core$Array$get, model.selectedTab, model.tabs);
		if (_p0.ctor === 'Nothing') {
			return '';
		} else {
			return _elm_lang$core$String$toLower(_p0._0.name);
		}
	}();
	return A2(_elm_lang$core$Basics_ops['++'], '#', $short);
};
var _user$project$Main$delta2url = F2(
	function (model1, model2) {
		return (!_elm_lang$core$Native_Utils.eq(model1.selectedTab, model2.selectedTab)) ? _elm_lang$core$Maybe$Just(
			{
				entry: _rgrempel$elm_route_url$RouteUrl$NewEntry,
				url: _user$project$Main$urlOf(model2)
			}) : _elm_lang$core$Maybe$Nothing;
	});
var _user$project$Main$tabTitles = function (model) {
	return function (_p1) {
		return _elm_lang$core$Array$toList(
			A2(
				_elm_lang$core$Array$map,
				function (x) {
					return _elm_lang$html$Html$text(x.name);
				},
				_p1));
	}(model.tabs);
};
var _user$project$Main$header = {
	ctor: '::',
	_0: A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h5,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '40px'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('easyHome'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}),
	_1: {ctor: '[]'}
};
var _user$project$Main$nameToNumber = function (name) {
	return function (_p2) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			-1,
			A2(
				_elm_lang$core$Array$get,
				0,
				A2(
					_elm_lang$core$Array$map,
					function (x) {
						return x.number;
					},
					A2(
						_elm_lang$core$Array$filter,
						function (x) {
							return _elm_lang$core$Native_Utils.eq(x.name, name);
						},
						function (_) {
							return _.tabs;
						}(_p2)))));
	};
};
var _user$project$Main$model = {
	mdl: _debois$elm_mdl$Material$model,
	selectedTab: 1,
	page: _user$project$Page_Page$model,
	tabs: _elm_lang$core$Array$fromList(
		{ctor: '[]'})
};
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {mdl: a, page: b, selectedTab: c, tabs: d};
	});
var _user$project$Main$PageMsg = function (a) {
	return {ctor: 'PageMsg', _0: a};
};
var _user$project$Main$switchTab = F2(
	function (k, just) {
		return function (_p3) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				_elm_lang$core$Platform_Cmd$none,
				A2(
					_elm_lang$core$Maybe$map,
					function (_p4) {
						return A2(
							_elm_lang$core$Platform_Cmd$map,
							_user$project$Main$PageMsg,
							just(_p4));
					},
					A2(
						_elm_lang$core$Array$get,
						k,
						function (_) {
							return _.tabs;
						}(_p3))));
		};
	});
var _user$project$Main$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p5 = msg;
		switch (_p5.ctor) {
			case 'LoadTabs':
				if (_p5._0.ctor === 'Ok') {
					var tabs_ = _elm_lang$core$Array$fromList(
						A2(
							_elm_lang$core$List$sortBy,
							function (_) {
								return _.number;
							},
							_p5._0._0));
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{tabs: tabs_}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								tabs: _elm_lang$core$Array$fromList(
									{ctor: '[]'})
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'SelectTab':
				var _p6 = _p5._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedTab: _p6}),
					_1: A3(_user$project$Main$switchTab, _p6, _user$project$Page_Page$init, model)
				};
			case 'AddressChange':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selectedTab: A2(_user$project$Main$nameToNumber, _p5._0, model)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Mdl':
				return A3(_debois$elm_mdl$Material$update, _user$project$Main$Mdl, _p5._0, model);
			default:
				return A6(
					_debois$elm_mdl$Material_Helpers$lift,
					function (_) {
						return _.page;
					},
					F2(
						function (m, x) {
							return _elm_lang$core$Native_Utils.update(
								m,
								{page: x});
						}),
					_user$project$Main$PageMsg,
					_user$project$Page_Page$update,
					_p5._0,
					model);
		}
	});
var _user$project$Main$subs = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material$subscriptions, _user$project$Main$Mdl, model),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Platform_Sub$map,
					_user$project$Main$PageMsg,
					_user$project$Page_Page$subs(model.page)),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$LoadTabs = function (a) {
	return {ctor: 'LoadTabs', _0: a};
};
var _user$project$Main$init = _elm_lang$core$Platform_Cmd$batch(
	{
		ctor: '::',
		_0: _debois$elm_mdl$Material$init(_user$project$Main$Mdl),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Request$send, _user$project$Main$LoadTabs, _user$project$Page_Page$getTabs),
			_1: {ctor: '[]'}
		}
	});
var _user$project$Main$AddressChange = function (a) {
	return {ctor: 'AddressChange', _0: a};
};
var _user$project$Main$SelectTab = function (a) {
	return {ctor: 'SelectTab', _0: a};
};
var _user$project$Main$view_ = function (model) {
	var top = function (_p7) {
		return A2(
			_elm_lang$html$Html$map,
			_user$project$Main$PageMsg,
			_user$project$Page_Page$view(
				function (_) {
					return _.page;
				}(_p7)));
	}(model);
	return _debois$elm_mdl$Material_Scheme$top(
		A4(
			_debois$elm_mdl$Material_Layout$render,
			_user$project$Main$Mdl,
			model.mdl,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Layout$selectedTab(model.selectedTab),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Layout$onSelectTab(_user$project$Main$SelectTab),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Layout$fixedHeader,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Layout$scrolling,
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				drawer: {ctor: '[]'},
				header: _user$project$Main$header,
				main: {
					ctor: '::',
					_0: top,
					_1: {ctor: '[]'}
				},
				tabs: {
					ctor: '_Tuple2',
					_0: _user$project$Main$tabTitles(model),
					_1: {ctor: '[]'}
				}
			}));
};
var _user$project$Main$view = _elm_lang$html$Html_Lazy$lazy(_user$project$Main$view_);
var _user$project$Main$location2messages = function (location) {
	return {
		ctor: '::',
		_0: function () {
			var _p8 = A2(_elm_lang$core$String$dropLeft, 1, location.hash);
			if (_p8 === '') {
				return _user$project$Main$SelectTab(0);
			} else {
				return _user$project$Main$AddressChange(_p8);
			}
		}(),
		_1: {ctor: '[]'}
	};
};
var _user$project$Main$main = _rgrempel$elm_route_url$RouteUrl$program(
	{
		delta2url: _user$project$Main$delta2url,
		location2messages: _user$project$Main$location2messages,
		init: {ctor: '_Tuple2', _0: _user$project$Main$model, _1: _user$project$Main$init},
		view: _user$project$Main$view,
		subscriptions: function (model) {
			return _user$project$Main$subs(model);
		},
		update: _user$project$Main$update
	})();
