var _user$project$Page_Page$getPage = function (id) {
	var decoder = _user$project$Data_Page$decoder;
	var url_ = A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Request$url,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'pages/view/',
			_elm_lang$core$Basics$toString(id)));
	return A2(_elm_lang$http$Http$get, url_, decoder);
};
var _user$project$Page_Page$getTabs = function () {
	var decoder = _elm_lang$core$Json_Decode$list(_user$project$Data_Page$decoderShort);
	var url_ = A2(_elm_lang$core$Basics_ops['++'], _user$project$Request$url, 'pages/short');
	return A2(_elm_lang$http$Http$get, url_, decoder);
}();
var _user$project$Page_Page$cardActionCss = {
	ctor: '::',
	_0: A2(_debois$elm_mdl$Material_Options$css, 'display', 'flex'),
	_1: {
		ctor: '::',
		_0: A2(_debois$elm_mdl$Material_Options$css, 'flex-direction', 'column'),
		_1: {
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '2rem'),
			_1: {ctor: '[]'}
		}
	}
};
var _user$project$Page_Page$split = F2(
	function (i, list) {
		var _p0 = A2(_elm_lang$core$List$take, i, list);
		if (_p0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _p0,
				_1: A2(
					_user$project$Page_Page$split,
					i,
					A2(_elm_lang$core$List$drop, i, list))
			};
		}
	});
var _user$project$Page_Page$Model = F5(
	function (a, b, c, d, e) {
		return {data: a, raise: b, mdl: c, colNumber: d, phxSocket: e};
	});
var _user$project$Page_Page$LeaveChannel = {ctor: 'LeaveChannel'};
var _user$project$Page_Page$JoinChannel = {ctor: 'JoinChannel'};
var _user$project$Page_Page$ReceiveChatMessage = function (a) {
	return {ctor: 'ReceiveChatMessage', _0: a};
};
var _user$project$Page_Page$model = {
	data: _user$project$Data_Page$empty,
	raise: -1,
	mdl: _debois$elm_mdl$Material$model,
	colNumber: 1,
	phxSocket: A4(
		_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
		'new:msg',
		'dashboard1:lobby',
		_user$project$Page_Page$ReceiveChatMessage,
		_fbonetti$elm_phoenix_socket$Phoenix_Socket$withDebug(
			_fbonetti$elm_phoenix_socket$Phoenix_Socket$init('ws://localhost:4000/socket/websocket')))
};
var _user$project$Page_Page$SunblindManualToggle = function (a) {
	return {ctor: 'SunblindManualToggle', _0: a};
};
var _user$project$Page_Page$ResponseAction = function (a) {
	return {ctor: 'ResponseAction', _0: a};
};
var _user$project$Page_Page$ResponsePort = function (a) {
	return {ctor: 'ResponsePort', _0: a};
};
var _user$project$Page_Page$ResponseSunblind = function (a) {
	return {ctor: 'ResponseSunblind', _0: a};
};
var _user$project$Page_Page$ResponseLight = function (a) {
	return {ctor: 'ResponseLight', _0: a};
};
var _user$project$Page_Page$ResponseDimmer = function (a) {
	return {ctor: 'ResponseDimmer', _0: a};
};
var _user$project$Page_Page$Skip = {ctor: 'Skip'};
var _user$project$Page_Page$ActionToggle = function (a) {
	return {ctor: 'ActionToggle', _0: a};
};
var _user$project$Page_Page$DimmerToggle = function (a) {
	return {ctor: 'DimmerToggle', _0: a};
};
var _user$project$Page_Page$DimLightToggle = F2(
	function (a, b) {
		return {ctor: 'DimLightToggle', _0: a, _1: b};
	});
var _user$project$Page_Page$SetDimmerFill = F2(
	function (a, b) {
		return {ctor: 'SetDimmerFill', _0: a, _1: b};
	});
var _user$project$Page_Page$SetLightFill = F2(
	function (a, b) {
		return {ctor: 'SetLightFill', _0: a, _1: b};
	});
var _user$project$Page_Page$SunblindToggle = function (a) {
	return {ctor: 'SunblindToggle', _0: a};
};
var _user$project$Page_Page$LightToggle = function (a) {
	return {ctor: 'LightToggle', _0: a};
};
var _user$project$Page_Page$PortToggle = function (a) {
	return {ctor: 'PortToggle', _0: a};
};
var _user$project$Page_Page$Raise = function (a) {
	return {ctor: 'Raise', _0: a};
};
var _user$project$Page_Page$dynamic = F2(
	function (k, raised) {
		return _debois$elm_mdl$Material_Options$many(
			{
				ctor: '::',
				_0: _elm_lang$core$Native_Utils.eq(k, raised) ? _debois$elm_mdl$Material_Elevation$e8 : _debois$elm_mdl$Material_Elevation$e2,
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Elevation$transition(250),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$onMouseEnter(
							_user$project$Page_Page$Raise(k)),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$onMouseLeave(
								_user$project$Page_Page$Raise(-1)),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _user$project$Page_Page$card = F7(
	function (props, type_, name, k, raised, action, menu) {
		return A2(
			_debois$elm_mdl$Material_Card$view,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '100%'),
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'height', '100%'),
						_1: {
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Options$css, 'object-fit', 'cover'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Page_Page$dynamic, k, raised),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Page_Page$Skip),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				props),
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Card$title,
					{
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'padding', '1rem 1rem 0 1rem'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Card$head,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(type_),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Options$div,
								{
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'padding', '0rem 2rem 0 2rem'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Options$span,
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Typography$display2,
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Color$text(_debois$elm_mdl$Material_Color$primary),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(name),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: action,
					_1: {
						ctor: '::',
						_0: menu,
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Page_Page$LoadPage = function (a) {
	return {ctor: 'LoadPage', _0: a};
};
var _user$project$Page_Page$init = function ($short) {
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: A2(
				_user$project$Request$send,
				_user$project$Page_Page$LoadPage,
				_user$project$Page_Page$getPage(
					_user$project$Data_Id$toInt($short.id))),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Task$perform,
					_elm_lang$core$Basics$identity,
					_elm_lang$core$Task$succeed(_user$project$Page_Page$JoinChannel)),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Page_Page$WindowResized = function (a) {
	return {ctor: 'WindowResized', _0: a};
};
var _user$project$Page_Page$PhoenixMsg = function (a) {
	return {ctor: 'PhoenixMsg', _0: a};
};
var _user$project$Page_Page$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Page_Page$subs = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Menu$subs, _user$project$Page_Page$Mdl, model.mdl),
			_1: {
				ctor: '::',
				_0: A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$listen, model.phxSocket, _user$project$Page_Page$PhoenixMsg),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Page_Page$update = F2(
	function (msg, model) {
		var _p1 = A2(
			_elm_lang$core$Debug$log,
			'Page - update - msg - log',
			_elm_lang$core$Basics$toString(msg));
		var updatePage = function (p) {
			return _elm_lang$core$Native_Utils.update(
				model,
				{data: p});
		};
		var page = model.data;
		var updateContent = F2(
			function (i, x) {
				return updatePage(
					_elm_lang$core$Native_Utils.update(
						page,
						{
							content: A3(_elm_lang$core$Array$set, i, x, page.content)
						}));
			});
		var nomodel = function (x) {
			return {ctor: '_Tuple2', _0: model, _1: x};
		};
		var skip = {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'LoadPage':
				if (_p2._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{data: _p2._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{data: _user$project$Data_Page$empty}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'Raise':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{raise: _p2._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'WindowResized':
				var _p3 = A2(
					_elm_lang$core$Debug$log,
					'WindowResized',
					_elm_lang$core$Basics$toString(_p2._0));
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'PortToggle':
				return function (_p4) {
					return nomodel(
						A2(
							_user$project$Request$send,
							_user$project$Page_Page$ResponsePort,
							_user$project$Data_Port$toggle(_p4)));
				}(_p2._0);
			case 'LightToggle':
				return function (_p5) {
					return nomodel(
						A2(
							_user$project$Request$send,
							_user$project$Page_Page$ResponseLight,
							_user$project$Data_Light$toggle(_p5)));
				}(_p2._0);
			case 'SunblindToggle':
				return function (_p6) {
					return nomodel(
						A2(
							_user$project$Request$send,
							_user$project$Page_Page$ResponseSunblind,
							_user$project$Data_Sunblind$click(_p6)));
				}(_p2._0);
			case 'DimmerToggle':
				return function (_p7) {
					return nomodel(
						A2(
							_user$project$Request$send,
							_user$project$Page_Page$ResponseDimmer,
							_user$project$Data_Dimmer$toggle(_p7)));
				}(_p2._0);
			case 'SetLightFill':
				return function (_p8) {
					return nomodel(
						A2(
							_user$project$Request$send,
							_user$project$Page_Page$ResponseLight,
							A2(_user$project$Data_Light$setFill, _p2._1, _p8)));
				}(_p2._0);
			case 'SetDimmerFill':
				return function (_p9) {
					return nomodel(
						A2(
							_user$project$Request$send,
							_user$project$Page_Page$ResponseDimmer,
							A2(_user$project$Data_Dimmer$setFill, _p2._1, _p9)));
				}(_p2._0);
			case 'DimLightToggle':
				return function (_p10) {
					return nomodel(
						A2(
							_user$project$Request$send,
							_user$project$Page_Page$ResponseDimmer,
							_user$project$Data_Dimmer$toggleLight(_p10)));
				}(_p2._1);
			case 'SunblindManualToggle':
				return function (_p11) {
					return nomodel(
						A2(
							_user$project$Request$send,
							_user$project$Page_Page$ResponseSunblind,
							_user$project$Data_Sunblind$toggleManual(_p11)));
				}(_p2._0);
			case 'ActionToggle':
				return function (_p12) {
					return nomodel(
						A2(
							_user$project$Request$send,
							_user$project$Page_Page$ResponseAction,
							_user$project$Data_Action$toggle(_p12)));
				}(_p2._0);
			case 'ResponseDimmer':
				if (_p2._0.ctor === 'Ok') {
					var _p13 = _p2._0._0;
					return {
						ctor: '_Tuple2',
						_0: A2(
							updateContent,
							_p13.order,
							_user$project$Data_Page$Dimmer(_p13)),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{data: _user$project$Data_Page$empty}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'ResponseLight':
				if (_p2._0.ctor === 'Ok') {
					var _p14 = _p2._0._0;
					return {
						ctor: '_Tuple2',
						_0: A2(
							updateContent,
							_p14.order,
							_user$project$Data_Page$Light(_p14)),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{data: _user$project$Data_Page$empty}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'ResponsePort':
				if (_p2._0.ctor === 'Ok') {
					var _p15 = _p2._0._0;
					return {
						ctor: '_Tuple2',
						_0: A2(
							updateContent,
							_p15.order,
							_user$project$Data_Page$Port(_p15)),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{data: _user$project$Data_Page$empty}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'ResponseSunblind':
				if (_p2._0.ctor === 'Ok') {
					var _p16 = _p2._0._0;
					return {
						ctor: '_Tuple2',
						_0: A2(
							updateContent,
							_p16.order,
							_user$project$Data_Page$Sunblind(_p16)),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{data: _user$project$Data_Page$empty}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'ResponseAction':
				if (_p2._0.ctor === 'Ok') {
					var _p17 = _p2._0._0;
					return {
						ctor: '_Tuple2',
						_0: A2(
							updateContent,
							_p17.order,
							_user$project$Data_Page$Action(_p17)),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{data: _user$project$Data_Page$empty}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'Skip':
				return skip;
			case 'Mdl':
				return A3(_debois$elm_mdl$Material$update, _user$project$Page_Page$Mdl, _p2._0, model);
			case 'ReceiveChatMessage':
				var _p18 = A2(_elm_lang$core$Json_Decode$decodeValue, _elm_lang$core$Json_Decode$string, _p2._0);
				if (_p18.ctor === 'Ok') {
					var _p19 = A2(_elm_lang$core$Debug$log, 'ChatMessage text: ', _p18._0);
					return skip;
				} else {
					return skip;
				}
			case 'JoinChannel':
				var channel = _fbonetti$elm_phoenix_socket$Phoenix_Channel$init('dashboard1:lobby');
				var _p20 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$join, channel, model.phxSocket);
				var phxSocket = _p20._0;
				var phxCmd = _p20._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Page_Page$PhoenixMsg, phxCmd)
				};
			case 'LeaveChannel':
				var _p21 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$leave, 'dashboard1:lobby', model.phxSocket);
				var phxSocket = _p21._0;
				var phxCmd = _p21._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Page_Page$PhoenixMsg, phxCmd)
				};
			default:
				var _p22 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$update, _p2._0, model.phxSocket);
				var phxSocket = _p22._0;
				var phxCmd = _p22._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Page_Page$PhoenixMsg, phxCmd)
				};
		}
	});
var _user$project$Page_Page$actionCard = F2(
	function (mdl, action) {
		var _p23 = '';
		return A2(
			_debois$elm_mdl$Material_Card$actions,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Options$div,
					_user$project$Page_Page$cardActionCss,
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Options$span,
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Typography$title,
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Funkcja: '),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Options$span,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Typography$body2,
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-left', '1rem'),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(action.$function),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Card$subhead,
									{
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'display', 'flex'),
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'align-items', 'center'),
											_1: {
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Options$css, 'padding', '.3rem 2.5rem'),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: A5(
											_debois$elm_mdl$Material_Button$render,
											_user$project$Page_Page$Mdl,
											{
												ctor: '::',
												_0: 0,
												_1: {ctor: '[]'}
											},
											mdl,
											{
												ctor: '::',
												_0: _debois$elm_mdl$Material_Button$fab,
												_1: {
													ctor: '::',
													_0: A2(_debois$elm_mdl$Material_Options$css, 'align', 'center'),
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$onClick(
															_user$project$Page_Page$ActionToggle(action)),
														_1: {
															ctor: '::',
															_0: A2(_debois$elm_mdl$Material_Options$when, action.state, _debois$elm_mdl$Material_Button$colored),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{
												ctor: '::',
												_0: _debois$elm_mdl$Material_Icon$i('star'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Page_Page$dimmerCard = F3(
	function (mdl, dimmer, raise) {
		var icon = 'wb_sunny';
		var color = A2(_debois$elm_mdl$Material_Color$color, _debois$elm_mdl$Material_Color$Amber, _debois$elm_mdl$Material_Color$S500);
		var cell = A2(_debois$elm_mdl$Material_Options$css, 'width', '64px');
		var lightRow = function (light) {
			return A2(
				_debois$elm_mdl$Material_Card$subhead,
				{
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Options$css, 'display', 'flex'),
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'align-items', 'center'),
						_1: {
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Options$css, 'padding', '.3rem 2rem'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Options$span,
						{
							ctor: '::',
							_0: cell,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(light.name),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Options$span,
							{
								ctor: '::',
								_0: cell,
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'text-align', 'center'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Icon$view,
									icon,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Color$text(color),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Icon$size18,
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Options$span,
								{
									ctor: '::',
									_0: cell,
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'text-align', 'right'),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: A5(
										_debois$elm_mdl$Material_Button$render,
										_user$project$Page_Page$Mdl,
										{
											ctor: '::',
											_0: 0,
											_1: {ctor: '[]'}
										},
										mdl,
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Button$fab,
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Options$onClick(
													A2(_user$project$Page_Page$DimLightToggle, dimmer, light)),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Button$icon,
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Icon$i('highlight'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				});
		};
		var renderLights = _elm_lang$core$Native_Utils.eq(dimmer.order, raise) ? A2(
			_debois$elm_mdl$Material_Options$div,
			{
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-top', '2rem'),
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Options$css, 'margin', 'auto'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Options$span,
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Typography$title,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Color$text(_debois$elm_mdl$Material_Color$primary),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-bottom', '3rem'),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Światła:'),
						_1: {ctor: '[]'}
					}),
				_1: A2(_elm_lang$core$List$map, lightRow, dimmer.lights)
			}) : A2(
			_debois$elm_mdl$Material_Options$div,
			{ctor: '[]'},
			{ctor: '[]'});
		return A2(
			_debois$elm_mdl$Material_Card$actions,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Options$div,
					_user$project$Page_Page$cardActionCss,
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Card$subhead,
							{
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'display', 'flex'),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'align-items', 'center'),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'padding', '.3rem 2.5rem'),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Button$render,
									_user$project$Page_Page$Mdl,
									{
										ctor: '::',
										_0: 0,
										_1: {ctor: '[]'}
									},
									mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Button$fab,
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'align', 'center'),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Options$onClick(
													_user$project$Page_Page$DimmerToggle(dimmer)),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Icon$i('highlight'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Slider$view(
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Slider$step(25),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Slider$value(dimmer.fill),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Slider$min(25),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Slider$max(100),
												_1: {
													ctor: '::',
													_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '2rem'),
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Slider$onChange(
															_user$project$Page_Page$SetDimmerFill(dimmer)),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: renderLights,
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Page_Page$lightCard = F2(
	function (mdl, light) {
		var fill = _user$project$Data_Light$unpackFill(light);
		var slider = _debois$elm_mdl$Material_Slider$view(
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Slider$step(25),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Slider$value(fill),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Slider$min(25),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Slider$max(100),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Slider$onChange(
									_user$project$Page_Page$SetLightFill(light)),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '2rem'),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$when, !light.state, _debois$elm_mdl$Material_Slider$disabled),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
		var maybeDimmered = _elm_lang$core$Native_Utils.eq(light.fill, _elm_lang$core$Maybe$Nothing) ? A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'}) : slider;
		return A2(
			_debois$elm_mdl$Material_Card$actions,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Options$div,
					_user$project$Page_Page$cardActionCss,
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Card$subhead,
							{
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'display', 'flex'),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'align-items', 'center'),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'padding', '.3rem 2.5rem'),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Button$render,
									_user$project$Page_Page$Mdl,
									{
										ctor: '::',
										_0: 0,
										_1: {ctor: '[]'}
									},
									mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$onClick(
											_user$project$Page_Page$LightToggle(light)),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Button$fab,
											_1: {
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Options$when, light.state, _debois$elm_mdl$Material_Button$colored),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Icon$i('highlight'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: maybeDimmered,
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Page_Page$sunblindCard = F2(
	function (mdl, sunblind) {
		var icon = function () {
			var _p24 = sunblind.state;
			switch (_p24.ctor) {
				case 'Position':
					return 'loop';
				case 'InMove':
					return 'block';
				case 'Open':
					return 'bookmark_border';
				default:
					return 'bookmark';
			}
		}();
		var manual = _elm_lang$core$Native_Utils.eq(sunblind.state, _user$project$Data_Sunblind$Position);
		return A2(
			_debois$elm_mdl$Material_Card$actions,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Options$div,
					_user$project$Page_Page$cardActionCss,
					{
						ctor: '::',
						_0: A5(
							_debois$elm_mdl$Material_Toggles$switch,
							_user$project$Page_Page$Mdl,
							{
								ctor: '::',
								_0: 0,
								_1: {ctor: '[]'}
							},
							_user$project$Page_Page$model.mdl,
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$onToggle(
									_user$project$Page_Page$SunblindManualToggle(sunblind)),
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Toggles$ripple,
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Toggles$value(manual),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Manual'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Card$subhead,
								{
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'display', 'flex'),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'justify-content', 'space-between'),
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'align-items', 'center'),
											_1: {
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Options$css, 'padding', '.3rem 2.5rem'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{
									ctor: '::',
									_0: A5(
										_debois$elm_mdl$Material_Button$render,
										_user$project$Page_Page$Mdl,
										{
											ctor: '::',
											_0: 0,
											_1: {ctor: '[]'}
										},
										mdl,
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Options$onClick(
												_user$project$Page_Page$SunblindToggle(sunblind)),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Button$fab,
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Color$background(
														A2(_debois$elm_mdl$Material_Color$color, _debois$elm_mdl$Material_Color$Yellow, _debois$elm_mdl$Material_Color$S300)),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Icon$i(icon),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Page_Page$portCard = F2(
	function (mdl, port_) {
		var icon = _elm_lang$core$Native_Utils.eq(port_.state, true) ? 'power' : 'power_off';
		var _p25 = '';
		return A2(
			_debois$elm_mdl$Material_Card$actions,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Options$div,
					_user$project$Page_Page$cardActionCss,
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Card$subhead,
							{
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'display', 'flex'),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'justify-content', 'space-between'),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'align-items', 'center'),
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'padding', '.3rem 2.5rem'),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Button$render,
									_user$project$Page_Page$Mdl,
									{
										ctor: '::',
										_0: 0,
										_1: {ctor: '[]'}
									},
									mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$onClick(
											_user$project$Page_Page$PortToggle(port_)),
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Button$fab,
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Options$when,
													_elm_lang$core$Native_Utils.eq(port_.state, true),
													_debois$elm_mdl$Material_Button$colored),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Icon$i(icon),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Page_Page$genCard = F3(
	function (mdl, content, raise) {
		var menu = function (num) {
			return A2(
				_debois$elm_mdl$Material_Card$menu,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A5(
						_debois$elm_mdl$Material_Menu$render,
						_user$project$Page_Page$Mdl,
						{
							ctor: '::',
							_0: num,
							_1: {ctor: '[]'}
						},
						mdl,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Menu$bottomRight,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Menu$item,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Menu$onSelect(_user$project$Page_Page$Skip),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('English (US)'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				});
		};
		var _p26 = '';
		var _p27 = content;
		switch (_p27.ctor) {
			case 'Dimmer':
				var _p28 = _p27._0;
				var props = {
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Options$when,
						_elm_lang$core$Native_Utils.eq(_p28.order, raise),
						A2(_debois$elm_mdl$Material_Options$css, 'grid-row', 'span 2')),
					_1: {ctor: '[]'}
				};
				return A7(
					_user$project$Page_Page$card,
					props,
					'sciemniacz',
					_p28.name,
					_p28.order,
					raise,
					A3(_user$project$Page_Page$dimmerCard, mdl, _p28, raise),
					menu(_p28.order));
			case 'Sunblind':
				var _p29 = _p27._0;
				return A7(
					_user$project$Page_Page$card,
					{ctor: '[]'},
					'roleta',
					_p29.name,
					_p29.order,
					raise,
					A2(_user$project$Page_Page$sunblindCard, mdl, _p29),
					menu(_p29.order));
			case 'Light':
				var _p30 = _p27._0;
				return A7(
					_user$project$Page_Page$card,
					{ctor: '[]'},
					'światło',
					_p30.name,
					_p30.order,
					raise,
					A2(_user$project$Page_Page$lightCard, mdl, _p30),
					menu(_p30.order));
			case 'Action':
				var _p31 = _p27._0;
				return A7(
					_user$project$Page_Page$card,
					{ctor: '[]'},
					'akcja',
					_p31.name,
					_p31.order,
					raise,
					A2(_user$project$Page_Page$actionCard, mdl, _p31),
					menu(_p31.order));
			default:
				var _p32 = _p27._0;
				return A7(
					_user$project$Page_Page$card,
					{ctor: '[]'},
					'port',
					_p32.name,
					_p32.order,
					raise,
					A2(_user$project$Page_Page$portCard, mdl, _p32),
					menu(_p32.order));
		}
	});
var _user$project$Page_Page$genCols = function (model) {
	var colGap = '50px';
	var colWidth = '300px';
	var colNumber = 'auto';
	var cards = function (_p33) {
		return _elm_lang$core$Array$toList(
			function (_) {
				return _.content;
			}(
				function (_) {
					return _.data;
				}(_p33)));
	}(model);
	return A2(
		_debois$elm_mdl$Material_Options$div,
		{
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Options$css, 'class', 'col'),
			_1: {
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Options$css, 'display', 'grid'),
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Options$css, 'grid-gap', '10px'),
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'grid-template-columns', 'repeat(auto-fill, minmax(260px, 1fr))'),
						_1: {
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Options$css, 'grid-auto-rows', '260px'),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'overflow', 'visible'),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		},
		A2(
			_elm_lang$core$List$map,
			function (x) {
				return A3(_user$project$Page_Page$genCard, model.mdl, x, model.raise);
			},
			cards));
};
var _user$project$Page_Page$view = function (model) {
	return A2(
		_elm_lang$html$Html$main_,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$align('center'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '20px'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A3(
				_elm_lang$html$Html$node,
				'meta',
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$name('viewport'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$content('width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no'),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: _user$project$Page_Page$genCols(model),
				_1: {ctor: '[]'}
			}
		});
};
