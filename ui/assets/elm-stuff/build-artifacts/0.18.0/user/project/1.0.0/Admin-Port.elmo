var _user$project$Admin_Port$deletePort = function (p) {
	var url_ = A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Request$url,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'ports/',
			_elm_lang$core$Basics$toString(p)));
	return _user$project$Request$delete(url_);
};
var _user$project$Admin_Port$encode = function (p) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'id',
				_1: _elm_lang$core$Json_Encode$int(p.id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'name',
					_1: _elm_lang$core$Json_Encode$string(p.name)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'mode',
						_1: _elm_lang$core$Json_Encode$string(p.mode)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'state',
							_1: _elm_lang$core$Json_Encode$bool(p.state)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'type',
								_1: _elm_lang$core$Json_Encode$string(p.type_)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'timeout',
									_1: _elm_lang$core$Json_Encode$int(p.timeout)
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};
var _user$project$Admin_Port$Port = F8(
	function (a, b, c, d, e, f, g, h) {
		return {id: a, name: b, mode: c, state: d, type_: e, timeout: f, deviceId: g, device: h};
	});
var _user$project$Admin_Port$empty = A8(_user$project$Admin_Port$Port, 0, '', '', false, '', 0, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
var _user$project$Admin_Port$decoder = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'device',
	_elm_lang$core$Json_Decode$nullable(_user$project$Admin_Device$decoder),
	_elm_lang$core$Maybe$Nothing,
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'device_id',
		_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
		_elm_lang$core$Maybe$Nothing,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'timeout',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'type',
				_elm_lang$core$Json_Decode$string,
				A4(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
					'state',
					_elm_lang$core$Json_Decode$bool,
					false,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'mode',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'name',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'id',
								_elm_lang$core$Json_Decode$int,
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Admin_Port$Port)))))))));
var _user$project$Admin_Port$getPorts = function () {
	var decode = A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'data',
			_1: {ctor: '[]'}
		},
		_elm_lang$core$Json_Decode$list(_user$project$Admin_Port$decoder));
	var url_ = A2(_elm_lang$core$Basics_ops['++'], _user$project$Request$url, 'ports');
	return A2(_elm_lang$http$Http$get, url_, decode);
}();
var _user$project$Admin_Port$updatePort = function (p) {
	var body = _elm_lang$http$Http$jsonBody(
		_elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'port',
					_1: _user$project$Admin_Port$encode(p)
				},
				_1: {ctor: '[]'}
			}));
	var decode = A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'data',
			_1: {ctor: '[]'}
		},
		_user$project$Admin_Port$decoder);
	var url_ = A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Request$url,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'ports/',
			_elm_lang$core$Basics$toString(p.id)));
	return A3(_user$project$Request$put, url_, body, decode);
};
var _user$project$Admin_Port$createPort = function (p) {
	var body = _elm_lang$http$Http$jsonBody(
		_elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'port',
					_1: _user$project$Admin_Port$encode(p)
				},
				_1: {ctor: '[]'}
			}));
	var decode = A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'data',
			_1: {ctor: '[]'}
		},
		_user$project$Admin_Port$decoder);
	var url_ = A2(_elm_lang$core$Basics_ops['++'], _user$project$Request$url, 'ports/');
	return A3(_user$project$Request$post, url_, body, decode);
};
