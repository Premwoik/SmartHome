var _user$project$Page_Dashboard$split = F3(
	function (i, r, list) {
		var n = (_elm_lang$core$Native_Utils.cmp(r, 0) > 0) ? (i + 1) : i;
		var _p0 = A2(_elm_lang$core$List$take, n, list);
		if (_p0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _p0,
				_1: A3(
					_user$project$Page_Dashboard$split,
					i,
					r - 1,
					A2(_elm_lang$core$List$drop, n, list))
			};
		}
	});
var _user$project$Page_Dashboard$genCells = function (model) {
	var cellBody = function (d) {
		return A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, x) {
					return A4(_user$project$Page_Dashboard_Card$genCard, model.mdl, i, x, model.raise);
				}),
			d);
	};
	var l_ = function (_p1) {
		return function (_) {
			return _.content;
		}(
			function (_) {
				return _.data;
			}(_p1));
	}(model);
	var rest = A2(
		_elm_lang$core$Basics_ops['%'],
		_elm_lang$core$List$length(l_),
		4);
	var elems = (_elm_lang$core$List$length(l_) / 4) | 0;
	var cards = A3(_user$project$Page_Dashboard$split, elems, rest, l_);
	return A2(
		_elm_lang$core$List$map,
		function (x) {
			return A2(
				_debois$elm_mdl$Material_Grid$cell,
				{
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Phone, 4),
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Tablet, 4),
						_1: {
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Desktop, 3),
							_1: {ctor: '[]'}
						}
					}
				},
				cellBody(x));
		},
		cards);
};
var _user$project$Page_Dashboard$view = function (model) {
	var content = A2(
		_elm_lang$html$Html$main_,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$align('center'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '20px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'max-width', _1: '1300px'},
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Grid$grid,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Grid$cell,
						{
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Phone, 4),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Tablet, 8),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Desktop, 6),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: A6(_user$project$Page_Dashboard_Chart$chart, model, 'Temperatura salon', _user$project$Page_Dashboard_Chart$ch1, true, false, false),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Grid$cell,
							{
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Phone, 4),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Tablet, 8),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Desktop, 6),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: A6(_user$project$Page_Dashboard_Chart$chart, model, 'UÅ¼ycie energii dom', _user$project$Page_Dashboard_Chart$ch2, false, true, false),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Grid$grid,
					{ctor: '[]'},
					_user$project$Page_Dashboard$genCells(model)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$map,
						_user$project$Page_Dashboard_Type$Snackbar,
						_debois$elm_mdl$Material_Snackbar$view(model.snackbar)),
					_1: {ctor: '[]'}
				}
			}
		});
	return A5(
		_user$project$Page$body1,
		'Panel sterowania',
		'',
		A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'}),
		{ctor: '[]'},
		{
			ctor: '::',
			_0: content,
			_1: {ctor: '[]'}
		});
};
var _user$project$Page_Dashboard$isInContent2 = F2(
	function (c, d) {
		var _p2 = A2(
			_elm_lang$core$List$any,
			function (x) {
				return _elm_lang$core$Native_Utils.eq(x, c);
			},
			d);
		if (_p2 === true) {
			var _p3 = c.type_;
			switch (_p3) {
				case 'dimmer':
					return A2(
						_user$project$Request$send,
						_user$project$Page_Dashboard_Type$ResponseDimmer,
						_user$project$Data_Dimmer$getView(c.id));
				case 'light':
					return A2(
						_user$project$Request$send,
						_user$project$Page_Dashboard_Type$ResponseLight,
						_user$project$Data_Light$getView(c.id));
				case 'port':
					return A2(
						_user$project$Request$send,
						_user$project$Page_Dashboard_Type$ResponsePort,
						_user$project$Data_Port$getView(c.id));
				case 'action':
					return A2(
						_user$project$Request$send,
						_user$project$Page_Dashboard_Type$ResponseAction,
						_user$project$Data_Action$getView(c.id));
				case 'sunblind':
					return A2(
						_user$project$Request$send,
						_user$project$Page_Dashboard_Type$ResponseSunblind,
						_user$project$Data_Sunblind$getView(c.id));
				case 'task':
					return A2(
						_user$project$Request$send,
						_user$project$Page_Dashboard_Type$ResponseTask,
						_user$project$Data_Task$getView(c.id));
				default:
					return _elm_lang$core$Platform_Cmd$none;
			}
		} else {
			return _elm_lang$core$Platform_Cmd$none;
		}
	});
var _user$project$Page_Dashboard$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var updateDashboard = function (p) {
				return _elm_lang$core$Native_Utils.update(
					model,
					{data: p});
			};
			var dash = model.data;
			var updateContent_ = function (x) {
				return updateDashboard(
					_elm_lang$core$Native_Utils.update(
						dash,
						{
							content: A2(_user$project$Data_Dashboard$updateContent, x, dash.content)
						}));
			};
			var nomodel = function (x) {
				return {ctor: '_Tuple2', _0: model, _1: x};
			};
			var sRef = model.socketRef;
			var skip = {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			var _p4 = msg;
			switch (_p4.ctor) {
				case 'SelectTab':
					var _p7 = _p4._0;
					var send = function (_p5) {
						return A2(
							_user$project$Request$send,
							_user$project$Page_Dashboard_Type$LoadDashboard,
							_user$project$Data_Dashboard$getDashboard(
								_user$project$Data_Id$toInt(
									function (_) {
										return _.id;
									}(_p5))));
					};
					var loadDashboard = function (_p6) {
						return A2(
							_elm_lang$core$Maybe$withDefault,
							_elm_lang$core$Platform_Cmd$none,
							A2(
								_elm_lang$core$Maybe$map,
								send,
								A2(
									_elm_lang$core$Array$get,
									_p7,
									function (_) {
										return _.tabs;
									}(_p6))));
					};
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{selectedTab: _p7}),
						_1: loadDashboard(model)
					};
				case 'LoadTabs':
					if (_p4._0.ctor === 'Ok') {
						var tabs_ = _elm_lang$core$Array$fromList(
							A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.number;
								},
								_p4._0._0));
						var newModel = _elm_lang$core$Native_Utils.update(
							model,
							{tabs: tabs_, loaded: true});
						var _v4 = _user$project$Page_Dashboard_Type$SelectTab(0),
							_v5 = newModel;
						msg = _v4;
						model = _v5;
						continue update;
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									tabs: _elm_lang$core$Array$fromList(
										{ctor: '[]'})
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'LoadDashboard':
					if (_p4._0.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									data: _user$project$Data_Dashboard$makeShortContent(_p4._0._0)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{data: _user$project$Data_Dashboard$empty}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'Raise':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{raise: _p4._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'PortToggle':
					return function (_p8) {
						return nomodel(
							A2(
								_user$project$Request$send,
								_user$project$Page_Dashboard_Type$ResponsePort,
								A2(_user$project$Data_Port$toggle, sRef, _p8)));
					}(_p4._0);
				case 'LightToggle':
					return function (_p9) {
						return nomodel(
							A2(
								_user$project$Request$send,
								_user$project$Page_Dashboard_Type$ResponseLight,
								A2(_user$project$Data_Light$toggle, sRef, _p9)));
					}(_p4._0);
				case 'SunblindToggle':
					return function (_p10) {
						return nomodel(
							A2(
								_user$project$Request$send,
								_user$project$Page_Dashboard_Type$ResponseSunblind,
								A2(_user$project$Data_Sunblind$click, sRef, _p10)));
					}(_p4._0);
				case 'DimmerToggle':
					return function (_p11) {
						return nomodel(
							A2(
								_user$project$Request$send,
								_user$project$Page_Dashboard_Type$ResponseDimmer,
								A2(_user$project$Data_Dimmer$toggle, sRef, _p11)));
					}(_p4._0);
				case 'SetDimmerFill':
					return function (_p12) {
						return nomodel(
							A2(
								_user$project$Request$send,
								_user$project$Page_Dashboard_Type$ResponseDimmer,
								A3(_user$project$Data_Dimmer$setFill, _p4._1, sRef, _p12)));
					}(_p4._0);
				case 'DimLightToggle':
					return function (_p13) {
						return nomodel(
							A2(
								_user$project$Request$send,
								_user$project$Page_Dashboard_Type$ResponseDimmer,
								A2(_user$project$Data_Dimmer$toggleLight, sRef, _p13)));
					}(_p4._1);
				case 'SunblindManualToggle':
					return function (_p14) {
						return nomodel(
							A2(
								_user$project$Request$send,
								_user$project$Page_Dashboard_Type$ResponseSunblind,
								A2(_user$project$Data_Sunblind$toggleManual, sRef, _p14)));
					}(_p4._0);
				case 'ActionToggle':
					return function (_p15) {
						return nomodel(
							A2(
								_user$project$Request$send,
								_user$project$Page_Dashboard_Type$ResponseAction,
								A2(_user$project$Data_Action$toggle, sRef, _p15)));
					}(_p4._0);
				case 'TaskToggle':
					return function (_p16) {
						return nomodel(
							A2(
								_user$project$Request$send,
								_user$project$Page_Dashboard_Type$ResponseTask,
								A2(_user$project$Data_Task$toggle, sRef, _p16)));
					}(_p4._0);
				case 'ResponseDimmer':
					if (_p4._0.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: updateContent_(
								_user$project$Data_Dashboard$Dimmer(_p4._0._0)),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{data: _user$project$Data_Dashboard$empty}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'ResponseLight':
					if (_p4._0.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: updateContent_(
								_user$project$Data_Dashboard$Light(_p4._0._0)),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{data: _user$project$Data_Dashboard$empty}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'ResponsePort':
					if (_p4._0.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: updateContent_(
								_user$project$Data_Dashboard$Port(_p4._0._0)),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{data: _user$project$Data_Dashboard$empty}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'ResponseSunblind':
					if (_p4._0.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: updateContent_(
								_user$project$Data_Dashboard$Sunblind(_p4._0._0)),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{data: _user$project$Data_Dashboard$empty}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'ResponseAction':
					if (_p4._0.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: updateContent_(
								_user$project$Data_Dashboard$Action(_p4._0._0)),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{data: _user$project$Data_Dashboard$empty}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'ResponseTask':
					if (_p4._0.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: updateContent_(
								_user$project$Data_Dashboard$Task(_p4._0._0)),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{data: _user$project$Data_Dashboard$empty}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'LightEdit':
					return skip;
				case 'DimmerEdit':
					return skip;
				case 'ActionEdit':
					return skip;
				case 'SunblindEdit':
					return skip;
				case 'PortEdit':
					return skip;
				case 'TaskEdit':
					return skip;
				case 'ReceiveDashboardMessage':
					var _p21 = _p4._0;
					var _p17 = A2(
						_user$project$Page_Dashboard$update,
						_user$project$Page_Dashboard_Type$ShowToast('Update cards'),
						model);
					var model_ = _p17._0;
					var cmd_ = _p17._1;
					var _p18 = A2(_elm_lang$core$Debug$log, 'Reveive', _p21);
					var _p19 = _user$project$Data_Dashboard$decodeUpdateNoti(_p21);
					if (_p19.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: model_,
							_1: _elm_lang$core$Platform_Cmd$batch(
								{
									ctor: '::',
									_0: cmd_,
									_1: A2(
										_elm_lang$core$List$map,
										function (x) {
											return A2(_user$project$Page_Dashboard$isInContent2, x, model.data.shortContent);
										},
										_p19._0)
								})
						};
					} else {
						var _p20 = A2(_elm_lang$core$Debug$log, 'ERROR', _p19._0);
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'ShowToast':
					return A2(
						_debois$elm_mdl$Material_Helpers$map2nd,
						_elm_lang$core$Platform_Cmd$map(_user$project$Page_Dashboard_Type$Snackbar),
						A2(
							_debois$elm_mdl$Material_Helpers$map1st,
							function (s) {
								return _elm_lang$core$Native_Utils.update(
									model,
									{snackbar: s});
							},
							A2(
								_debois$elm_mdl$Material_Snackbar$add,
								A2(_debois$elm_mdl$Material_Snackbar$toast, 1, _p4._0),
								model.snackbar)));
				case 'Skip':
					return skip;
				case 'Snackbar':
					return A2(
						_debois$elm_mdl$Material_Helpers$map2nd,
						_elm_lang$core$Platform_Cmd$map(_user$project$Page_Dashboard_Type$Snackbar),
						A2(
							_debois$elm_mdl$Material_Helpers$map1st,
							function (s) {
								return _elm_lang$core$Native_Utils.update(
									model,
									{snackbar: s});
							},
							A2(_debois$elm_mdl$Material_Snackbar$update, _p4._0, model.snackbar)));
				default:
					return A3(_debois$elm_mdl$Material$update, _user$project$Page_Dashboard_Type$Mdl, _p4._0, model);
			}
		}
	});
var _user$project$Page_Dashboard$model = {
	data: _user$project$Data_Dashboard$empty,
	inProgress: _elm_lang$core$Maybe$Nothing,
	socketRef: _elm_lang$core$Maybe$Nothing,
	loaded: false,
	tabs: _elm_lang$core$Array$fromList(
		{ctor: '[]'}),
	selectedTab: 0,
	raise: -1,
	mdl: _debois$elm_mdl$Material$model,
	snackbar: _debois$elm_mdl$Material_Snackbar$model,
	usedIndex: -1
};
var _user$project$Page_Dashboard$tabsUrls = function (_p22) {
	return A2(
		_elm_lang$core$Array$map,
		function (x) {
			return _elm_lang$core$String$toLower(x.name);
		},
		function (_) {
			return _.tabs;
		}(_p22));
};
var _user$project$Page_Dashboard$tabsTitles = function (_p23) {
	return _elm_lang$core$Array$toList(
		A2(
			_elm_lang$core$Array$map,
			function (x) {
				return x.name;
			},
			function (_) {
				return _.tabs;
			}(_p23)));
};
var _user$project$Page_Dashboard$subs = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Menu$subs, _user$project$Page_Dashboard_Type$Mdl, model.mdl),
			_1: {ctor: '[]'}
		});
};
var _user$project$Page_Dashboard$init = function (model) {
	return model.loaded ? _elm_lang$core$Platform_Cmd$none : _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: A2(_user$project$Request$send, _user$project$Page_Dashboard_Type$LoadTabs, _user$project$Data_Dashboard$getTabs),
			_1: {ctor: '[]'}
		});
};
