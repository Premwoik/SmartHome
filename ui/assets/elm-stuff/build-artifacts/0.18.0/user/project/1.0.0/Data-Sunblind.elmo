var _user$project$Data_Sunblind$set = F2(
	function (s, state) {
		return _elm_lang$core$Native_Utils.update(
			s,
			{state: state});
	});
var _user$project$Data_Sunblind$setList = F2(
	function (s, state) {
		return A2(
			_elm_lang$core$List$map,
			function (x) {
				return _elm_lang$core$Native_Utils.update(
					x,
					{state: state});
			},
			s);
	});
var _user$project$Data_Sunblind$stateEncoder = function (s) {
	var toString = function () {
		var _p0 = s;
		switch (_p0.ctor) {
			case 'Open':
				return 'open';
			case 'Close':
				return 'close';
			case 'InMove':
				return 'in_move';
			default:
				return 'position';
		}
	}();
	return _elm_lang$core$Json_Encode$string(toString);
};
var _user$project$Data_Sunblind$Sunblind = F4(
	function (a, b, c, d) {
		return {id: a, name: b, state: c, sunblind_: d};
	});
var _user$project$Data_Sunblind$Position = {ctor: 'Position'};
var _user$project$Data_Sunblind$isManual = function (s) {
	return _elm_lang$core$Native_Utils.eq(s.state, _user$project$Data_Sunblind$Position);
};
var _user$project$Data_Sunblind$InMove = {ctor: 'InMove'};
var _user$project$Data_Sunblind$Close = {ctor: 'Close'};
var _user$project$Data_Sunblind$setCloseList = function (l) {
	return A2(_user$project$Data_Sunblind$setList, l, _user$project$Data_Sunblind$Close);
};
var _user$project$Data_Sunblind$setClose = function (s) {
	return A2(_user$project$Data_Sunblind$set, s, _user$project$Data_Sunblind$Close);
};
var _user$project$Data_Sunblind$Open = {ctor: 'Open'};
var _user$project$Data_Sunblind$stateDecoder = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (b) {
		var _p1 = b;
		switch (_p1) {
			case 'open':
				return _elm_lang$core$Json_Decode$succeed(_user$project$Data_Sunblind$Open);
			case 'close':
				return _elm_lang$core$Json_Decode$succeed(_user$project$Data_Sunblind$Close);
			case 'in_move':
				return _elm_lang$core$Json_Decode$succeed(_user$project$Data_Sunblind$InMove);
			case 'position':
				return _elm_lang$core$Json_Decode$succeed(_user$project$Data_Sunblind$Position);
			default:
				return _elm_lang$core$Json_Decode$fail('Wrong state value');
		}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$Data_Sunblind$decoder = A5(
	_elm_lang$core$Json_Decode$map4,
	_user$project$Data_Sunblind$Sunblind,
	A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'state', _user$project$Data_Sunblind$stateDecoder),
	A2(_elm_lang$core$Json_Decode$field, 'sunblind', _elm_lang$core$Json_Decode$string));
var _user$project$Data_Sunblind$click = function (s) {
	var url_ = A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Request$url,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'sunblinds/click/',
			_elm_lang$core$Basics$toString(s.id)));
	return A3(
		_user$project$Request$post,
		url_,
		_elm_lang$http$Http$emptyBody,
		_user$project$Request$data(_user$project$Data_Sunblind$decoder));
};
var _user$project$Data_Sunblind$setState = F2(
	function (s, state) {
		var data_ = _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'id',
					_1: _elm_lang$core$Json_Encode$int(s.id)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'state',
						_1: _user$project$Data_Sunblind$stateEncoder(state)
					},
					_1: {ctor: '[]'}
				}
			});
		var url_ = A2(_elm_lang$core$Basics_ops['++'], _user$project$Request$url, 'sunblinds/calibrate');
		return A3(
			_elm_lang$http$Http$post,
			url_,
			_elm_lang$http$Http$jsonBody(data_),
			_user$project$Request$data(_user$project$Data_Sunblind$decoder));
	});
var _user$project$Data_Sunblind$isOpen = function (sun) {
	return _elm_lang$core$Native_Utils.eq(sun.state, _user$project$Data_Sunblind$Open);
};
var _user$project$Data_Sunblind$setOpenList = function (list) {
	return A2(_user$project$Data_Sunblind$setList, list, _user$project$Data_Sunblind$Open);
};
var _user$project$Data_Sunblind$setOpen = function (s) {
	return A2(_user$project$Data_Sunblind$set, s, _user$project$Data_Sunblind$Open);
};
var _user$project$Data_Sunblind$toggleManual = function (s) {
	return _elm_lang$core$Native_Utils.eq(s.state, _user$project$Data_Sunblind$Position) ? A2(_user$project$Data_Sunblind$setState, s, _user$project$Data_Sunblind$Open) : A2(_user$project$Data_Sunblind$setState, s, _user$project$Data_Sunblind$Position);
};
