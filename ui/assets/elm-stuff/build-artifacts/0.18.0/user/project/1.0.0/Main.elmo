var _user$project$Main$tabs = {ctor: '[]'};
var _user$project$Main$tabUrls = _elm_lang$core$Array$fromList(
	A2(
		_elm_lang$core$List$map,
		function (_p0) {
			var _p1 = _p0;
			return _p1._1;
		},
		_user$project$Main$tabs));
var _user$project$Main$urlOf = function (model) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'#',
		A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(_elm_lang$core$Array$get, model.selectedTab, _user$project$Main$tabUrls)));
};
var _user$project$Main$delta2url = F2(
	function (model1, model2) {
		return (!_elm_lang$core$Native_Utils.eq(model1.selectedTab, model2.selectedTab)) ? _elm_lang$core$Maybe$Just(
			{
				entry: _rgrempel$elm_route_url$RouteUrl$NewEntry,
				url: _user$project$Main$urlOf(model2)
			}) : _elm_lang$core$Maybe$Nothing;
	});
var _user$project$Main$urlTabs = _elm_lang$core$Dict$fromList(
	A2(
		_elm_lang$core$List$indexedMap,
		F2(
			function (idx, _p2) {
				var _p3 = _p2;
				return {ctor: '_Tuple2', _0: _p3._1, _1: idx};
			}),
		_user$project$Main$tabs));
var _user$project$Main$header = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h5,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '40px'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('easyHome'),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	});
var _user$project$Main$model = {mdl: _debois$elm_mdl$Material$model, selectedTab: 0};
var _user$project$Main$Model = F2(
	function (a, b) {
		return {mdl: a, selectedTab: b};
	});
var _user$project$Main$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p4 = msg;
		if (_p4.ctor === 'SelectTab') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{selectedTab: _p4._0}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return A3(_debois$elm_mdl$Material$update, _user$project$Main$Mdl, _p4._0, model);
		}
	});
var _user$project$Main$view = function (model) {
	return A3(
		_debois$elm_mdl$Material_Scheme$topWithScheme,
		_debois$elm_mdl$Material_Color$Cyan,
		_debois$elm_mdl$Material_Color$Lime,
		A4(
			_debois$elm_mdl$Material_Layout$render,
			_user$project$Main$Mdl,
			model.mdl,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Layout$fixedHeader,
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Layout$scrolling,
					_1: {ctor: '[]'}
				}
			},
			{
				header: {
					ctor: '::',
					_0: _user$project$Main$header,
					_1: {ctor: '[]'}
				},
				drawer: {ctor: '[]'},
				tabs: {
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: {ctor: '[]'}
				},
				main: {ctor: '[]'}
			}));
};
var _user$project$Main$SelectTab = function (a) {
	return {ctor: 'SelectTab', _0: a};
};
var _user$project$Main$location2messages = function (location) {
	return {
		ctor: '::',
		_0: function () {
			var _p5 = A2(_elm_lang$core$String$dropLeft, 1, location.hash);
			if (_p5 === '') {
				return _user$project$Main$SelectTab(0);
			} else {
				return _user$project$Main$SelectTab(
					A2(
						_elm_lang$core$Maybe$withDefault,
						-1,
						A2(_elm_lang$core$Dict$get, _p5, _user$project$Main$urlTabs)));
			}
		}(),
		_1: {ctor: '[]'}
	};
};
var _user$project$Main$main = _rgrempel$elm_route_url$RouteUrl$program(
	{
		delta2url: _user$project$Main$delta2url,
		location2messages: _user$project$Main$location2messages,
		init: {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				_user$project$Main$model,
				{
					mdl: A2(_debois$elm_mdl$Material_Layout$setTabsWidth, 2124, _user$project$Main$model.mdl)
				}),
			_1: _debois$elm_mdl$Material$init(_user$project$Main$Mdl)
		},
		view: _user$project$Main$view,
		subscriptions: function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$core$Platform_Sub$none,
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material$subscriptions, _user$project$Main$Mdl, model),
						_1: {ctor: '[]'}
					}
				});
		},
		update: _user$project$Main$update
	})();
