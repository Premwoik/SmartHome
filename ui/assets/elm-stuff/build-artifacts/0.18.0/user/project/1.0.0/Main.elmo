var _user$project$Main$e404 = function (_p0) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A3(
				_debois$elm_mdl$Material_Options$styled,
				_elm_lang$html$Html$h1,
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Options$cs('mdl-typography--display-4'),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Typography$center,
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('404'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$header = {
	ctor: '::',
	_0: A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h5,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '40px'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('easyHome'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}),
	_1: {ctor: '[]'}
};
var _user$project$Main$model = {mdl: _debois$elm_mdl$Material$model, selectedTab: 0, rooms: _user$project$Page_Room_Model$model, actions: _user$project$Page_Action$model};
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {mdl: a, rooms: b, actions: c, selectedTab: d};
	});
var _user$project$Main$ActionMsg = function (a) {
	return {ctor: 'ActionMsg', _0: a};
};
var _user$project$Main$RoomMsg = function (a) {
	return {ctor: 'RoomMsg', _0: a};
};
var _user$project$Main$tabs = {
	ctor: '::',
	_0: {
		ctor: '_Tuple4',
		_0: 'Pokoje',
		_1: 'rooms',
		_2: function (_p1) {
			return A2(
				_elm_lang$html$Html$map,
				_user$project$Main$RoomMsg,
				_user$project$Page_Room$view(
					function (_) {
						return _.rooms;
					}(_p1)));
		},
		_3: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$RoomMsg, _user$project$Page_Room$init)
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '_Tuple4',
			_0: 'Akcje',
			_1: 'actions',
			_2: function (_p2) {
				return A2(
					_elm_lang$html$Html$map,
					_user$project$Main$ActionMsg,
					_user$project$Page_Action$view(
						function (_) {
							return _.actions;
						}(_p2)));
			},
			_3: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$ActionMsg, _user$project$Page_Action$init)
		},
		_1: {ctor: '[]'}
	}
};
var _user$project$Main$tabInit = _elm_lang$core$Array$fromList(
	A2(
		_elm_lang$core$List$map,
		function (_p3) {
			var _p4 = _p3;
			return _p4._3;
		},
		_user$project$Main$tabs));
var _user$project$Main$tabTitles = A2(
	_elm_lang$core$List$map,
	function (_p5) {
		var _p6 = _p5;
		return _elm_lang$html$Html$text(_p6._0);
	},
	_user$project$Main$tabs);
var _user$project$Main$tabViews = _elm_lang$core$Array$fromList(
	A2(
		_elm_lang$core$List$map,
		function (_p7) {
			var _p8 = _p7;
			return _p8._2;
		},
		_user$project$Main$tabs));
var _user$project$Main$tabUrls = _elm_lang$core$Array$fromList(
	A2(
		_elm_lang$core$List$map,
		function (_p9) {
			var _p10 = _p9;
			return _p10._1;
		},
		_user$project$Main$tabs));
var _user$project$Main$urlOf = function (model) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'#',
		A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(_elm_lang$core$Array$get, model.selectedTab, _user$project$Main$tabUrls)));
};
var _user$project$Main$delta2url = F2(
	function (model1, model2) {
		return (!_elm_lang$core$Native_Utils.eq(model1.selectedTab, model2.selectedTab)) ? _elm_lang$core$Maybe$Just(
			{
				entry: _rgrempel$elm_route_url$RouteUrl$NewEntry,
				url: _user$project$Main$urlOf(model2)
			}) : _elm_lang$core$Maybe$Nothing;
	});
var _user$project$Main$urlTabs = _elm_lang$core$Dict$fromList(
	A2(
		_elm_lang$core$List$indexedMap,
		F2(
			function (idx, _p11) {
				var _p12 = _p11;
				return {ctor: '_Tuple2', _0: _p12._1, _1: idx};
			}),
		_user$project$Main$tabs));
var _user$project$Main$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p13 = msg;
		switch (_p13.ctor) {
			case 'SelectTab':
				var _p14 = _p13._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedTab: _p14}),
					_1: A2(
						_elm_lang$core$Maybe$withDefault,
						_elm_lang$core$Platform_Cmd$none,
						A2(_elm_lang$core$Array$get, _p14, _user$project$Main$tabInit))
				};
			case 'Mdl':
				return A3(_debois$elm_mdl$Material$update, _user$project$Main$Mdl, _p13._0, model);
			case 'RoomMsg':
				return A6(
					_debois$elm_mdl$Material_Helpers$lift,
					function (_) {
						return _.rooms;
					},
					F2(
						function (m, x) {
							return _elm_lang$core$Native_Utils.update(
								m,
								{rooms: x});
						}),
					_user$project$Main$RoomMsg,
					_user$project$Page_Room$update,
					_p13._0,
					model);
			default:
				return A6(
					_debois$elm_mdl$Material_Helpers$lift,
					function (_) {
						return _.actions;
					},
					F2(
						function (m, x) {
							return _elm_lang$core$Native_Utils.update(
								m,
								{actions: x});
						}),
					_user$project$Main$ActionMsg,
					_user$project$Page_Action$update,
					_p13._0,
					model);
		}
	});
var _user$project$Main$SelectTab = function (a) {
	return {ctor: 'SelectTab', _0: a};
};
var _user$project$Main$view_ = function (model) {
	var top = A2(
		_elm_lang$core$Maybe$withDefault,
		_user$project$Main$e404,
		A2(_elm_lang$core$Array$get, model.selectedTab, _user$project$Main$tabViews))(model);
	return _debois$elm_mdl$Material_Scheme$top(
		A4(
			_debois$elm_mdl$Material_Layout$render,
			_user$project$Main$Mdl,
			model.mdl,
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Layout$selectedTab(model.selectedTab),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Layout$onSelectTab(_user$project$Main$SelectTab),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Layout$fixedHeader,
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Layout$scrolling,
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				drawer: {ctor: '[]'},
				header: _user$project$Main$header,
				main: {
					ctor: '::',
					_0: top,
					_1: {ctor: '[]'}
				},
				tabs: {
					ctor: '_Tuple2',
					_0: _user$project$Main$tabTitles,
					_1: {ctor: '[]'}
				}
			}));
};
var _user$project$Main$view = _elm_lang$html$Html_Lazy$lazy(_user$project$Main$view_);
var _user$project$Main$location2messages = function (location) {
	return {
		ctor: '::',
		_0: function () {
			var _p15 = A2(_elm_lang$core$String$dropLeft, 1, location.hash);
			if (_p15 === '') {
				return _user$project$Main$SelectTab(0);
			} else {
				return _user$project$Main$SelectTab(
					A2(
						_elm_lang$core$Maybe$withDefault,
						-1,
						A2(_elm_lang$core$Dict$get, _p15, _user$project$Main$urlTabs)));
			}
		}(),
		_1: {ctor: '[]'}
	};
};
var _user$project$Main$main = _rgrempel$elm_route_url$RouteUrl$program(
	{
		delta2url: _user$project$Main$delta2url,
		location2messages: _user$project$Main$location2messages,
		init: {
			ctor: '_Tuple2',
			_0: _user$project$Main$model,
			_1: _debois$elm_mdl$Material$init(_user$project$Main$Mdl)
		},
		view: _user$project$Main$view,
		subscriptions: function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$core$Platform_Sub$none,
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material$subscriptions, _user$project$Main$Mdl, model),
						_1: {ctor: '[]'}
					}
				});
		},
		update: _user$project$Main$update
	})();
