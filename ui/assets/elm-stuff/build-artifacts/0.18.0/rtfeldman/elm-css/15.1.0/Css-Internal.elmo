var _rtfeldman$elm_css$Css_Internal$lengthConverter = F3(
	function (units, unitLabel, numericValue) {
		return {
			value: A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(numericValue),
				unitLabel),
			numericValue: numericValue,
			units: units,
			unitLabel: unitLabel,
			length: _rtfeldman$elm_css$Css_Structure$Compatible,
			lengthOrAuto: _rtfeldman$elm_css$Css_Structure$Compatible,
			lengthOrNumber: _rtfeldman$elm_css$Css_Structure$Compatible,
			lengthOrNone: _rtfeldman$elm_css$Css_Structure$Compatible,
			lengthOrMinMaxDimension: _rtfeldman$elm_css$Css_Structure$Compatible,
			lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css_Structure$Compatible,
			textIndent: _rtfeldman$elm_css$Css_Structure$Compatible,
			flexBasis: _rtfeldman$elm_css$Css_Structure$Compatible,
			lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css_Structure$Compatible,
			fontSize: _rtfeldman$elm_css$Css_Structure$Compatible,
			absoluteLength: _rtfeldman$elm_css$Css_Structure$Compatible,
			lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css_Structure$Compatible,
			calc: _rtfeldman$elm_css$Css_Structure$Compatible
		};
	});
var _rtfeldman$elm_css$Css_Internal$property = F2(
	function (key, value) {
		return _rtfeldman$elm_css$Css_Preprocess$AppendProperty(
			A2(
				_elm_lang$core$Basics_ops['++'],
				key,
				A2(_elm_lang$core$Basics_ops['++'], ':', value)));
	});
var _rtfeldman$elm_css$Css_Internal$getOverloadedProperty = F3(
	function (functionName, desiredKey, style) {
		getOverloadedProperty:
		while (true) {
			var _p0 = style;
			switch (_p0.ctor) {
				case 'AppendProperty':
					var key = A2(
						_elm_lang$core$Maybe$withDefault,
						'',
						_elm_lang$core$List$head(
							A2(_elm_lang$core$String$split, ':', _p0._0)));
					return A2(_rtfeldman$elm_css$Css_Internal$property, desiredKey, key);
				case 'ExtendSelector':
					return A2(
						_rtfeldman$elm_css$Css_Internal$property,
						desiredKey,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'elm-css-error-cannot-apply-',
							A2(_elm_lang$core$Basics_ops['++'], functionName, '-with-inapplicable-Style-for-selector')));
				case 'NestSnippet':
					return A2(
						_rtfeldman$elm_css$Css_Internal$property,
						desiredKey,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'elm-css-error-cannot-apply-',
							A2(_elm_lang$core$Basics_ops['++'], functionName, '-with-inapplicable-Style-for-combinator')));
				case 'WithPseudoElement':
					return A2(
						_rtfeldman$elm_css$Css_Internal$property,
						desiredKey,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'elm-css-error-cannot-apply-',
							A2(_elm_lang$core$Basics_ops['++'], functionName, '-with-inapplicable-Style-for-pseudo-element setter')));
				case 'WithMedia':
					return A2(
						_rtfeldman$elm_css$Css_Internal$property,
						desiredKey,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'elm-css-error-cannot-apply-',
							A2(_elm_lang$core$Basics_ops['++'], functionName, '-with-inapplicable-Style-for-media-query')));
				case 'WithKeyframes':
					return A2(
						_rtfeldman$elm_css$Css_Internal$property,
						desiredKey,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'elm-css-error-cannot-apply-',
							A2(_elm_lang$core$Basics_ops['++'], functionName, '-with-inapplicable-Style-for-keyframes')));
				default:
					if (_p0._0.ctor === '[]') {
						return A2(
							_rtfeldman$elm_css$Css_Internal$property,
							desiredKey,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'elm-css-error-cannot-apply-',
								A2(_elm_lang$core$Basics_ops['++'], functionName, '-with-empty-Style')));
					} else {
						if (_p0._0._1.ctor === '[]') {
							var _v1 = functionName,
								_v2 = desiredKey,
								_v3 = _p0._0._0;
							functionName = _v1;
							desiredKey = _v2;
							style = _v3;
							continue getOverloadedProperty;
						} else {
							var _v4 = functionName,
								_v5 = desiredKey,
								_v6 = _rtfeldman$elm_css$Css_Preprocess$ApplyStyles(_p0._0._1);
							functionName = _v4;
							desiredKey = _v5;
							style = _v6;
							continue getOverloadedProperty;
						}
					}
			}
		}
	});
var _rtfeldman$elm_css$Css_Internal$printKeyframeSelector = function (_p1) {
	var _p2 = _p1;
	var propertiesStr = A2(
		_elm_lang$core$String$join,
		'',
		A2(
			_elm_lang$core$List$map,
			function (_p3) {
				var _p4 = _p3;
				return A2(_elm_lang$core$Basics_ops['++'], _p4._0, ';');
			},
			_p2._1));
	var percentageStr = A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(_p2._0),
		'%');
	return A2(
		_elm_lang$core$Basics_ops['++'],
		percentageStr,
		A2(
			_elm_lang$core$Basics_ops['++'],
			' {',
			A2(_elm_lang$core$Basics_ops['++'], propertiesStr, '}')));
};
var _rtfeldman$elm_css$Css_Internal$compileKeyframes = function (tuples) {
	return A2(
		_elm_lang$core$String$join,
		'\n\n',
		A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Internal$printKeyframeSelector, tuples));
};
var _rtfeldman$elm_css$Css_Internal$ExplicitLength = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return {value: a, numericValue: b, units: c, unitLabel: d, length: e, lengthOrAuto: f, lengthOrNumber: g, lengthOrNone: h, lengthOrMinMaxDimension: i, lengthOrNoneOrMinMaxDimension: j, textIndent: k, flexBasis: l, absoluteLength: m, lengthOrNumberOrAutoOrNoneOrContent: n, fontSize: o, lengthOrAutoOrCoverOrContain: p, calc: q};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _rtfeldman$elm_css$Css_Internal$IncompatibleUnits = {ctor: 'IncompatibleUnits'};
var _rtfeldman$elm_css$Css_Internal$lengthForOverloadedProperty = A3(_rtfeldman$elm_css$Css_Internal$lengthConverter, _rtfeldman$elm_css$Css_Internal$IncompatibleUnits, '', 0);
var _rtfeldman$elm_css$Css_Internal$Property = function (a) {
	return {ctor: 'Property', _0: a};
};
